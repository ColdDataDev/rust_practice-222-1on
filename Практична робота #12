use rand::Rng;

fn gen_random_vector(n: usize) -> Vec<i32> {
    let mut rng = rand::thread_rng();
    (0..n).map(|_| rng.gen_range(10..100)).collect()
}

fn min_adjacent_sum(data: &[i32]) -> (i32, usize, usize) {
    let mut min_sum = i32::MAX;
    let mut min_indexes = (0, 1);
    
    for i in 0..data.len() - 1 {
        let sum = data[i] + data[i + 1];
        if sum < min_sum {
            min_sum = sum;
            min_indexes = (i, i + 1);
        }
    }
    
    (min_sum, min_indexes.0, min_indexes.1)
}

fn print_min_adjacent_sum(data: &[i32]) {
    
    print!("indexes: ");
    for i in 0..data.len() {
        print!("{:<4}", i);
    }
    println!();
    
    print!("data:   ");
    for &value in data {
        print!("{:<4}", value);
    }
    println!();
   
    let (min_sum, index1, index2) = min_adjacent_sum(data);
  
    print!("indexes: ");
    for i in 0..data.len() {
        if i == index1 || i == index2 {
            print!("\\__ ");
        } else {
            print!("    ");
        }
    }
    println!();
    
    println!("min adjacent sum={}+{}={} at indexes:{},{}", 
        data[index1], data[index2], min_sum, index1, index2);
}

fn main() {

    let vector = gen_random_vector(20);
    
    print_min_adjacent_sum(&vector);
}
