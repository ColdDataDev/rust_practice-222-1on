Str and &str

1)
fn main() {
    let s: &str = "hello, world";
    println!("Success!");
}

2)
fn main() {
    let s = String::from("hello, world");
    greetings(&s);  //передаємо посилання на String
}

fn greetings(s: &str) {
    println!("{}", s);
}

String

3)
fn main() {
    let mut s = String::new();  //присвоюємо нову стрічку
    s.push_str("hello, world");
    s.push('!');
    assert_eq!(s, "hello, world!");
    println!("Success!");
}

4)
fn main() {
    let mut s = String::from("hello");
    s.push(',');           //push працює з одним символом
    s.push_str(" world");   //push_str для стрічки
    s += "!";               //операція конкатенації
    println!("{}", s);
}

5)
fn main() {
    let s = String::from("I like dogs");
    let s1 = s.replace("dogs", "cats");  //заміна "dogs" на "cats"
    assert_eq!(s1, "I like cats");
    println!("Success!");
}

6)
fn main() {
    let s1 = String::from("hello,");
    let s2 = String::from("world!");
    let s3 = s1 + &s2;  //додаємо посилання на `s2`
    assert_eq!(s3, "hello,world!");
    println!("{}", s3);  //змінили s1 на s3
}

7)
fn main() {
    let s = String::from("hello, world");
    greetings(s);
}

fn greetings(s: String) {
    println!("{}", s);
}

8)
fn main() {
    let s = "hello, world".to_string();
    let s1: String = s;
    println!("Success!");
}

String escapes

9)
fn main() {
    let byte_escape = "I'm writing Ru\x73t!";
    println!("What are you doing\x3F (\\x3F means ?) {}", byte_escape);

    let unicode_codepoint = "\u{211D}";
    let character_name = "\"DOUBLE-STRUCK CAPITAL R\"";
    println!("Unicode character {} (U+211D) is called {}", unicode_codepoint, character_name);

    let long_string = "String literals \
                     can span multiple lines. \
                     The linebreak and indentation here can be escaped too!";
    println!("{}", long_string);
}

10)
fn main() {
    let raw_str = r"Escapes don't work here: \x3F \u{211D}";
    assert_eq!(raw_str, "Escapes don't work here: \\x3F \\u{211D}");
    println!("{}", raw_str);
}

String index

11)
fn main() {
    let s1 = String::from("hi,中国");
    let h = &s1[..1]; //UTF-8 indexing
    assert_eq!(h, "h");

    let h1 = &s1[3..6]; //Correct UTF-8 range for '中'
    assert_eq!(h1, "中");

    println!("Success!");
}

Operate on UTF8 string

12)
fn main() {
    for c in "你好，世界".chars() {  //використовуємо метод chars
        println!("{}", c);
    }
}
