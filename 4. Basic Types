1)fn main() {
    let x: i32 = 5;
    let mut y: u32 = 5;

    // Removed the line `y = x;` because you can't assign `i32` to `u32` directly.

    let z = 10; // Type of z is inferred as i32.

    println!("Success!");
}

2)
fn main() {
    let v: u16 = 38_u8 as u16;

    println!("Success!");
}

3)
fn main() {
    let x = 5;
    assert_eq!("i32".to_string(), type_of(&x)); // Type of `x` is `i32`.

    println!("Success!");
}

fn type_of<T>(_: &T) -> String {
    format!("{}", std::any::type_name::<T>())
}

4)
fn main() {
    assert_eq!(i8::MAX, 127); 
    assert_eq!(u8::MAX, 255); 

    println!("Success!");
}

5)
fn main() {
   let v1 = 251_u8.wrapping_add(8); // Use `wrapping_add` to handle overflow
   let v2 = i8::checked_add(120, 8).unwrap(); // Changed to a valid i8 addition
   println!("{},{}", v1, v2);
}

6)
fn main() {
    let v = 1_024 + 0xff + 0o77 + 0b1111_1111;
    assert!(v == 1597); // Correct value is 1597.

    println!("Success!");
}

7)
fn main() {
    let x = 1_000.000_1; // f64
    let y: f32 = 0.12;   // f32
    let z = 0.01_f64;    // f64

    assert_eq!(type_of(&x), "f64".to_string()); // `x` is of type `f64`.
    println!("Success!");
}

fn type_of<T>(_: &T) -> String {
    format!("{}", std::any::type_name::<T>())
}

8)
fn main() {
    assert!((0.1 + 0.2 - 0.3).abs() < f64::EPSILON); // Fix due to floating-point precision issues.

    println!("Success!");
}

9)
fn main() {
    let mut sum = 0;
    for i in -3..2 {
        sum += i;
    }

    assert!(sum == -3); // Sum of -3, -2, -1, 0, 1 is -3.

    for c in 'a'..='z' {
        println!("{}", c); // Loop from 'a' to 'z'.
    }
}

10)
use std::ops::{Range, RangeInclusive};
fn main() {
    assert_eq!((1..5), Range { start: 1, end: 5 }); // Exclusive range
    assert_eq!((1..=5), RangeInclusive::new(1, 5)); // Inclusive range

    println!("Success!");
}

11)
fn main() {
    // Integer addition
    assert!(1u32 + 2 == 3);

    // Integer subtraction
    assert!(1i32 - 2 == -1);
    
    // Removed assert for `1u8 - 2` as it doesn't compile due to overflow.

    assert!(3 * 50 == 150);

    assert!((9.6 / 3.2 - 3.0).abs() < f64::EPSILON); // Fix for floating-point comparison

    assert!(24 % 5 == 4);
    
    // Short-circuiting boolean logic
    assert!(true && false == false);
    assert!(true || false == true);
    assert!(!true == false);

    // Bitwise operations
    println!("0011 AND 0101 is {:04b}", 0b0011u32 & 0b0101);
    println!("0011 OR 0101 is {:04b}", 0b0011u32 | 0b0101);
    println!("0011 XOR 0101 is {:04b}", 0b0011u32 ^ 0b0101);
    println!("1 << 5 is {}", 1u32 << 5);
    println!("0x80 >> 2 is 0x{:x}", 0x80u32 >> 2);
}



